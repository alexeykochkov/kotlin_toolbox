package basic

fun iterrate(x: Int, y: Int, n: Int = 0): Int {
    var acc = 0 // acc - аккомулятор, 0 - это стартовый элемент суммирования.
    // Для умножения будет 1, для минимума +бесконечность для максимума - бесконечность. Это операция называется reduce
    for (i in 0..n - 1) {//!!! n-1
//         acc = x+y //сохранить в память acc - значение операции x+y c перезаписью
        acc =
            acc + x + y // считать acс из памяти x y тоже считать отправить в процессор для сложения а затем записать в память в ячейку с acc
// x = 1+2
    }
    for (i in 0 until n) {//!!! n-1 - не нужен
// x = 1+2
    }

    repeat(n) {

// x = 1+2
    }
    return acc
}


fun main() {

    val x = 1
    val y = 2

    var b = iterrate(x, y, 10)
    println(b)


// while-do цикл с неизвестным числом повторений
    // сперва проверяется условие (цикл может выть ен выполненни разу)
    var i = 1

    while (i < 0) {
        ++i
    }

    while (true) {
//        doWorck - это цикл do-while
        if (i > 0) {
            break
        }
//         doWorck - это цикл while-do
    }

// do-while цикл с неизвестным числом повторений хотя бы одна итеррация будет выполенна (условие проверяется в конце)


//    for - цикл с известным числом повторений
//    есть переменная цикла
    for (i in 0..10) {
//        i - это номер итеррации 11 итерраций
    }
//    range от 0 до 10 (включительно - это диапазон)
//    это "контейнер"
    var list = mutableListOf<Int>()
//    цикл(итеррирование) по коллекции
    for (i in list) {// вызываются методы next и hasNext

    }
//    while = fore для коллекций
    var listIter = list.listIterator()
    while (listIter.hasNext()) {
        var i = listIter.next()

    }
// range приближенно равно коллекции


}